FUNCTION mk_water_land_masks, $
   misr_path, $
   misr_block, $
   misr_resol, $
   water_mask, $
   land_mask, $
   AGP_FOLDER = agp_folder, $
   AGP_VERSION = agp_version, $
   VERBOSE = verbose, $
   DEBUG = debug, $
   EXCPT_COND = excpt_cond

   ;Sec-Doc
   ;  PURPOSE: This function generates two simplified landcover maps for
   ;  the specified MISR PATH and BLOCK, one for water bodies and one for
   ;  land masses.
   ;
   ;  ALGORITHM: This function relies on the function mk_agp_lc_masks.pro
   ;  to provide masks for the 7 standard MISR AGP surface cover types for
   ;  the specified MISR PATH and then combines the 3 categories (‘0:
   ;  shallow ocean’, ‘5: deep inland water’ and ‘6: deep ocean’) into the
   ;  water bodies mask, and the other 4 categories (‘1: land’, ‘2:
   ;  coastline’, ‘3: shallow inland water’ and ‘4: ephemeral water’) into
   ;  the land masses mask.
   ;
   ;  SYNTAX:
   ;  rc = mk_water_land_masks(misr_path, misr_block, misr_resol, $
   ;  water_mask, land_mask, $
   ;  AGP_FOLDER = agp_folder, AGP_VERSION = agp_version, $
   ;  VERBOSE = verbose, DEBUG = debug, EXCPT_COND = excpt_cond)
   ;
   ;  POSITIONAL PARAMETERS [INPUT/OUTPUT]:
   ;
   ;  *   misr_path {INT} [I]: The selected MISR PATH number.
   ;
   ;  *   misr_block {INT} [I]: The selected MISR BLOCK number.
   ;
   ;  *   misr_resol {INT} [I]: The spatial resolution at which the output
   ;      land and water masks are required (either 275 or 1100 m).
   ;
   ;  *   water_mask {BYTE array} [O]: The water mask for the specified
   ;      MISR PATH and BLOCK, at the requested spatial resolution.
   ;
   ;  *   land_mask {BYTE array} [O]: The land mask for the specified MISR
   ;      PATH and BLOCK, at the requested spatial resolution.
   ;
   ;  KEYWORD PARAMETERS [INPUT/OUTPUT]:
   ;
   ;  *   AGP_FOLDER = agp_folder {STRING} [I] (Default value: Set by
   ;      function
   ;      set_roots_vers.pro): The directory address of the folder
   ;      containing the MISR AGP files, if they are not located in the
   ;      default location.
   ;
   ;  *   AGP_VERSION = agp_version {STRING} [I] (Default value: Set by
   ;      function
   ;      set_roots_vers.pro): The AGP version identifier to use instead
   ;      of the default value.
   ;
   ;  *   VERBOSE = verbose {INT} [I] (Default value: 0): Flag to enable
   ;      (> 0) or skip (0) outputting messages on the console:
   ;
   ;      -   If verbose > 0, messages inform the user about progress in
   ;          the execution of time-consuming routines, or the location of
   ;          output files (e.g., log, map, plot, etc.);
   ;
   ;      -   If verbose > 1, messages record entering and exiting the
   ;          routine; and
   ;
   ;      -   If verbose > 2, messages provide additional information
   ;          about intermediary results.
   ;
   ;  *   DEBUG = debug {INT} [I] (Default value: 0): Flag to activate (1)
   ;      or skip (0) debugging tests.
   ;
   ;  *   EXCPT_COND = excpt_cond {STRING} [O] (Default value: ”):
   ;      Description of the exception condition if one has been
   ;      encountered, or a null string otherwise.
   ;
   ;  RETURNED VALUE TYPE: INT.
   ;
   ;  OUTCOME:
   ;
   ;  *   If no exception condition has been detected, this function
   ;      returns 0, and the output keyword parameter excpt_cond is set to
   ;      a null string, if the optional input keyword parameter DEBUG is
   ;      set and if the optional output keyword parameter EXCPT_COND is
   ;      provided in the call. The output positional parameters
   ;      water_mask and land_mask contain the desired masks.
   ;
   ;  *   If an exception condition has been detected, this function
   ;      returns a non-zero error code, and the output keyword parameter
   ;      excpt_cond contains a message about the exception condition
   ;      encountered, if the optional input keyword parameter DEBUG is
   ;      set and if the optional output keyword parameter EXCPT_COND is
   ;      provided. The output positional parameters water_mask and
   ;      land_mask may be inexistent, incomplete or incorrect.
   ;
   ;  EXCEPTION CONDITIONS:
   ;
   ;  *   Error 100: One or more positional parameter(s) are missing.
   ;
   ;  *   Error 110: Input positional parameter misr_path is invalid.
   ;
   ;  *   Error 120: Input positional parameter misr_block is invalid.
   ;
   ;  *   Error 130: Input positional parameter misr_resol is invalid.
   ;
   ;  *   Error 200: An exception condition occurred in
   ;      mk_agp_lc_masks.pro.
   ;
   ;  DEPENDENCIES:
   ;
   ;  *   chk_misr_block.pro
   ;
   ;  *   chk_misr_path.pro
   ;
   ;  *   chk_misr_resol.pro
   ;
   ;  *   is_numeric.pro
   ;
   ;  *   mk_agp_lc_masks.pro
   ;
   ;  *   strstr.pro
   ;
   ;  REMARKS:
   ;
   ;  *   NOTE 1: The water and land masks generated by this function are
   ;      based on static information on the spatial distribution of
   ;      surface geophysical types: they are valid for all cameras and
   ;      throughout the MISR mission.
   ;
   ;  *   NOTE 2: Although the underlying MISR AGP data distinguishes
   ;      between various types of geophysical media, this is not meant to
   ;      be an accurate land cover map, let alone a source of information
   ;      on land cover change.
   ;
   ;  *   NOTE 3: The landcover information contained in the AGP files is
   ;      provided at the spatial resolution of 1100 m. If the input
   ;      positional parameter misr_resol is set to 275, then the original
   ;      values are simply duplicated with the MISR-HR function lr2hr.pro
   ;      to artificially generate the higher resolution map: no aditional
   ;      or more detailed information is provided.
   ;
   ;  *   NOTE 4: The 7 base land cover maps are generated by the function
   ;      mk_agp_lc_masks, which accepts the following optional input
   ;      keyword parameters: AGP_FOLDER and AGP_VERSION are passed on
   ;      without checking their validity, while LOG_IT, LOG_FOLDER,
   ;      MAP_IT and MAP_FOLDER are unset for this purpose.
   ;
   ;  EXAMPLES:
   ;
   ;      IDL> misr_path = 168
   ;      IDL> misr_block = 110
   ;      IDL> misr_resol = 275
   ;      IDL> rc = mk_water_land_masks(misr_path, misr_block, $
   ;         misr_resol, water_mask, land_mask, $
   ;         AGP_FOLDER = agp_folder, AGP_VERSION = agp_version, $
   ;         DEBUG = debug, EXCPT_COND = excpt_cond)
   ;      IDL> PRINT, 'rc = ' + strstr(rc) + ', excpt_cond = >' + excpt_cond + '<'
   ;      rc = 0, excpt_cond = ><
   ;
   ;  REFERENCES:
   ;
   ;  *   Mike Bull, Jason Matthews, Duncan McDonald, Alexander Menzies,
   ;      Catherine Moroney, Kevin Mueller, Susan Paradise, Mike
   ;      Smyth (2011) _MISR Data Products Specifications_, JPL D-13963,
   ;      REVISION S, Section 9.4, p. 210, Jet Propulsion Laboratory,
   ;      California Institute of Technology, Pasadena, CA, USA.
   ;
   ;  VERSIONING:
   ;
   ;  *   2018–08–03: Version 0.9 — Initial release under the name
   ;      make_water_land_masks.pro.
   ;
   ;  *   2018–08–08: Version 1.0 — Initial public release.
   ;
   ;  *   2018–12–17: Version 1.2 — Update the code to rename the input
   ;      positional parameter resol to misr_resol, include additional
   ;      keyword parameters, use the new function make_agp_lc_masks.pro
   ;      instead of make_agp_masks.pro, and update the documentation.
   ;
   ;  *   2019–01–08: Version 1.3 — Rename the function from
   ;      make_water_land_masks.pro to mk_water_land_masks.pro, and update
   ;      the documentation.
   ;
   ;  *   2019–01–28: Version 2.00 — Systematic update of all routines to
   ;      implement stricter coding standards and improve documentation.
   ;
   ;  *   2019–02–24: Version 2.01 — Documentation update.
   ;
   ;  *   2019–08–20: Version 2.1.0 — Adopt revised coding and
   ;      documentation standards (in particular regarding the use of
   ;      verbose and the assignment of numeric return codes), and switch
   ;      to 3-parts version identifiers.
   ;Sec-Lic
   ;  INTELLECTUAL PROPERTY RIGHTS
   ;
   ;  *   Copyright (C) 2017-2019 Michel M. Verstraete.
   ;
   ;      Permission is hereby granted, free of charge, to any person
   ;      obtaining a copy of this software and associated documentation
   ;      files (the “Software”), to deal in the Software without
   ;      restriction, including without limitation the rights to use,
   ;      copy, modify, merge, publish, distribute, sublicense, and/or
   ;      sell copies of the Software, and to permit persons to whom the
   ;      Software is furnished to do so, subject to the following three
   ;      conditions:
   ;
   ;      1. The above copyright notice and this permission notice shall
   ;      be included in its entirety in all copies or substantial
   ;      portions of the Software.
   ;
   ;      2. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY
   ;      KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
   ;      WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
   ;      AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
   ;      HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
   ;      WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   ;      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
   ;      OTHER DEALINGS IN THE SOFTWARE.
   ;
   ;      See: https://opensource.org/licenses/MIT.
   ;
   ;      3. The current version of this Software is freely available from
   ;
   ;      https://github.com/mmverstraete.
   ;
   ;  *   Feedback
   ;
   ;      Please send comments and suggestions to the author at
   ;      MMVerstraete@gmail.com
   ;Sec-Cod

   COMPILE_OPT idl2, HIDDEN

   ;  Get the name of this routine:
   info = SCOPE_TRACEBACK(/STRUCTURE)
   rout_name = info[N_ELEMENTS(info) - 1].ROUTINE

   ;  Initialize the default return code:
   return_code = 0

   ;  Set the default values of flags and essential output keyword parameters:
   IF (KEYWORD_SET(verbose)) THEN BEGIN
      IF (is_numeric(verbose)) THEN verbose = FIX(verbose) ELSE verbose = 0
      IF (verbose LT 0) THEN verbose = 0
      IF (verbose GT 3) THEN verbose = 3
   ENDIF ELSE verbose = 0
   IF (KEYWORD_SET(debug)) THEN debug = 1 ELSE debug = 0
   excpt_cond = ''

   IF (verbose GT 1) THEN PRINT, 'Entering ' + rout_name + '.'

   IF (debug) THEN BEGIN

   ;  Return to the calling routine with an error message if one or more
   ;  positional parameters are missing:
      n_reqs = 5
      IF (N_PARAMS() NE n_reqs) THEN BEGIN
         error_code = 100
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': Routine must be called with ' + strstr(n_reqs) + $
            ' positional parameter(s): misr_path, misr_block, misr_resol, ' + $
            'land_mask, water_mask.'
         RETURN, error_code
      ENDIF

   ;  Return to the calling routine with an error message if the input
   ;  positional parameter 'misr_path' is invalid:
      rc = chk_misr_path(misr_path, DEBUG = debug, EXCPT_COND = excpt_cond)
      IF (rc NE 0) THEN BEGIN
         error_code = 110
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': ' + excpt_cond
         RETURN, error_code
      ENDIF

   ;  Return to the calling routine with an error message if the input
   ;  positional parameter 'misr_block' is invalid:
      rc = chk_misr_block(misr_block, DEBUG = debug, EXCPT_COND = excpt_cond)
      IF (rc NE 0) THEN BEGIN
         error_code = 120
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': ' + excpt_cond
         RETURN, error_code
      ENDIF

   ;  Return to the calling routine with an error message if the input
   ;  positional parameter 'misr_resol' is invalid:
      rc = chk_misr_resol(misr_resol, DEBUG = debug, EXCPT_COND = excpt_cond)
      IF (rc NE 0) THEN BEGIN
         error_code = 130
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': ' + excpt_cond
         RETURN, error_code
      ENDIF
   ENDIF

   ;  Retrieve the 7 standard masks available from the MISR AGP file for the
   ;  selected Path and Block:
   log_it = 0
   log_folder = ''
   map_it = 0
   map_folder = ''
   rc = mk_agp_lc_masks(misr_path, misr_block, misr_resol, landcover, $
      agp_masks, AGP_FOLDER = agp_folder, AGP_VERSION = agp_version, $
      LOG_IT = log_it, LOG_FOLDER = log_folder, $
      MAP_IT = map_it, MAP_FOLDER = map_folder, $
      VERBOSE = verbose, DEBUG = debug, EXCPT_COND = excpt_cond)
   IF (debug AND (rc NE 0)) THEN BEGIN
      error_code = 200
      excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
         ': ' + excpt_cond
      RETURN, error_code
   ENDIF

   ;  Generate the water mask by combining the surface classes 0, 5, and 6:
   water_mask = REFORM(agp_masks[0, *, *]) OR $
      REFORM(agp_masks[5, *, *]) OR $
      REFORM(agp_masks[6, *, *])

   ;  Generate the land mask by combining the surface classes 1, 2, 3 and 4:
   land_mask = REFORM(agp_masks[1, *, *]) OR $
      REFORM(agp_masks[2, *, *]) OR $
      REFORM(agp_masks[3, *, *]) OR $
      REFORM(agp_masks[4, *, *])

   IF (verbose GT 1) THEN PRINT, 'Exiting ' + rout_name + '.'

   RETURN, return_code

END
