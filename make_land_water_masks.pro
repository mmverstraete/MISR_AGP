FUNCTION make_land_water_masks, misr_path, misr_block, resol, land_mask, $
   water_mask, AGP_VERSION = agp_version, DEBUG = debug, EXCPT_COND = excpt_cond

   ;Sec-Doc
   ;  PURPOSE: This function generates the simplified land and water masks
   ;  needed by the best_fits_l1b2 routine to enable the replacement of
   ;  missing values in L1B2 files by reasonable estimates.
   ;
   ;  ALGORITHM: This function relies on the MISR-HR function
   ;  make_agp_masks.pro, which returns masks for the 7 standard AGP
   ;  surface cover types and combines 3 categories (‘0: shallow ocean’,
   ;  ‘5: deep inland water’ and ‘6: deep ocean’) into the water mask, and
   ;  the other 4 categories (‘1: land’, ‘2: coastline’, ‘3: shallow
   ;  inland water’ and ‘4: ephemeral water’) into the land mask. The
   ;  default spatial resolution of these masks is 1100 m; set the input
   ;  positional parameter resol to 275 if the masks are required at the
   ;  high spatial resolution version (275 m). In this case, the MISR-HR
   ;  function lr2hr.pro is called to upsize the arrays.
   ;
   ;  SYNTAX: rc = make_land_water_masks(misr_path, misr_block, resol, $
   ;  land_mask, water_mask, AGP_VERSION = agp_version, $
   ;  DEBUG = debug, EXCPT_COND = excpt_cond)
   ;
   ;  POSITIONAL PARAMETERS [INPUT/OUTPUT]:
   ;
   ;  *   misr_path {INTEGER} [I]: The selected MISR PATH number.
   ;
   ;  *   misr_block {INTEGER} [I]: The selected MISR BLOCK number.
   ;
   ;  *   resol {INTEGER} [I]: The spatial resolution at which the land
   ;      and water masks are required.
   ;
   ;  *   land_mask {BYTE array} [O]: The land mask for the specified PATH
   ;      and BLOCK, at the requested spatial resolution.
   ;
   ;  *   water_mask {BYTE array} [O]: The water mask for the specified
   ;      PATH and BLOCK, at the requested spatial resolution.
   ;
   ;  KEYWORD PARAMETERS [INPUT/OUTPUT]:
   ;
   ;  *   AGP_VERSION = agp_version {STRING} [I] (Default value: ’F01_24’):
   ;      The AGP version identifier to use.
   ;
   ;  *   DEBUG = debug {INT} [I] (Default value: 0): Flag to activate (1)
   ;      or skip (0) debugging tests.
   ;
   ;  *   EXCPT_COND = excpt_cond {STRING} [O] (Default value: ”):
   ;      Description of the exception condition if one has been
   ;      encountered, or a null string otherwise.
   ;
   ;  RETURNED VALUE TYPE: INTEGER.
   ;
   ;  OUTCOME:
   ;
   ;  *   If no exception condition has been detected, this function
   ;      returns 0, and the output keyword parameter excpt_cond is set to
   ;      a null string, if the optional input keyword parameter DEBUG is
   ;      set and if the optional output keyword parameter EXCPT_COND is
   ;      provided in the call. The output positional parameters land_mask
   ;      and water_mask contain the desired masks.
   ;
   ;  *   If an exception condition has been detected, this function
   ;      returns a non-zero error code, and the output keyword parameter
   ;      excpt_cond contains a message about the exception condition
   ;      encountered, if the optional input keyword parameter DEBUG is
   ;      set and if the optional output keyword parameter EXCPT_COND is
   ;      provided. Output positional parameters land_mask and water_mask
   ;      may be undefined, inexistent, incomplete or useless.
   ;
   ;  EXCEPTION CONDITIONS:
   ;
   ;  *   Error 100: One or more positional parameter(s) are missing.
   ;
   ;  *   Error 110: Input positional parameter misr_path is invalid.
   ;
   ;  *   Error 120: Input positional parameter misr_block is invalid.
   ;
   ;  *   Error 130: Input positional parameter resol is invalid.
   ;
   ;  *   Error 200: An exception condition occurred in
   ;      make_agp_masks.pro.
   ;
   ;  DEPENDENCIES:
   ;
   ;  *   chk_misr_block.pro
   ;
   ;  *   chk_misr_path.pro
   ;
   ;  *   make_agp_masks.pro
   ;
   ;  *   strstr.pro
   ;
   ;  REMARKS:
   ;
   ;  *   NOTE 1: The land and the water masks generated by this function
   ;      are based on static information on the spatial distribution of
   ;      surface geophysical types: they are valid for all cameras and
   ;      throughout the MISR mission.
   ;
   ;  *   NOTE 2: Although the underlying MISR AGP data distinguishes
   ;      between various types of geophysical media, this is not meant to
   ;      be an accurate land cover map, let alone a source of information
   ;      on land cover change.
   ;
   ;  EXAMPLES:
   ;
   ;      IDL> misr_path = 168
   ;      IDL> misr_block = 110
   ;      IDL> resol = 275
   ;      IDL> rc = make_land_water_masks(misr_path, misr_block, resol, land_mask, $
   ;         water_mask, AGP_VERSION = agp_version, /DEBUG, EXCPT_COND = excpt_cond)
   ;      IDL> PRINT, 'rc = ' + strstr(rc) + ', and excpt_cond = >' + excpt_cond + '<'
   ;      rc = 0, and excpt_cond = ><
   ;
   ;  REFERENCES:
   ;
   ;  *   Mike Bull, Jason Matthews, Duncan McDonald, Alexander Menzies,
   ;      Catherine Moroney, Kevin Mueller, Susan Paradise, Mike
   ;      Smyth (2011) _MISR Data Products Specifications_, JPL D-13963,
   ;      Revision S, Section 9.4, p. 210.
   ;
   ;  VERSIONING:
   ;
   ;  *   2018–08–03: Version 0.9 — Initial release.
   ;
   ;  *   2018–08–08: Version 1.0 — Initial public release.
   ;Sec-Lic
   ;  INTELLECTUAL PROPERTY RIGHTS
   ;
   ;  *   Copyright (C) 2017-2018 Michel M. Verstraete.
   ;
   ;      Permission is hereby granted, free of charge, to any person
   ;      obtaining a copy of this software and associated documentation
   ;      files (the “Software”), to deal in the Software without
   ;      restriction, including without limitation the rights to use,
   ;      copy, modify, merge, publish, distribute, sublicense, and/or
   ;      sell copies of the Software, and to permit persons to whom the
   ;      Software is furnished to do so, subject to the following
   ;      conditions:
   ;
   ;      The above copyright notice and this permission notice shall be
   ;      included in all copies or substantial portions of the Software.
   ;
   ;      THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
   ;      EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
   ;      OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   ;      NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
   ;      HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
   ;      WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   ;      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
   ;      OTHER DEALINGS IN THE SOFTWARE.
   ;
   ;      See: https://opensource.org/licenses/MIT.
   ;
   ;  *   Feedback
   ;
   ;      Please send comments and suggestions to the author at
   ;      MMVerstraete@gmail.com.
   ;Sec-Cod

   ;  Get the name of this routine:
   info = SCOPE_TRACEBACK(/STRUCTURE)
   rout_name = info[N_ELEMENTS(info) - 1].ROUTINE

   ;  Initialize the default return code and the exception condition message:
   return_code = 0
   excpt_cond = ''

   ;  Set the default values of essential input keyword parameters:
   IF (KEYWORD_SET(debug)) THEN debug = 1 ELSE debug = 0

   ;  If the AGP version number is not specified, use 'F01_24':
   IF (~KEYWORD_SET(agp_version)) THEN agp_version = 'F01_24'

   IF (debug) THEN BEGIN

   ;  Return to the calling routine with an error message if one or more
   ;  positional parameters are missing:
      n_reqs = 5
      IF (N_PARAMS() NE n_reqs) THEN BEGIN
         error_code = 100
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': Routine must be called with ' + strstr(n_reqs) + $
            ' positional parameter(s): misr_path, misr_block, resol, ' + $
            'land_mask, water_mask.'
         RETURN, error_code
      ENDIF

   ;  Return to the calling routine with an error message if the input
   ;  positional parameter 'misr_path' is invalid:
      rc = chk_misr_path(misr_path, DEBUG = debug, EXCPT_COND = excpt_cond)
      IF (rc NE 0) THEN BEGIN
         error_code = 110
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': ' + excpt_cond
         RETURN, error_code
      ENDIF

   ;  Return to the calling routine with an error message if the input
   ;  positional parameter 'misr_block' is invalid:
      rc = chk_misr_block(misr_block, DEBUG = debug, EXCPT_COND = excpt_cond)
      IF (rc NE 0) THEN BEGIN
         error_code = 120
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': ' + excpt_cond
         RETURN, error_code
      ENDIF

   ;  Return to the calling routine with an error message if the input
   ;  positional parameter 'resol' is invalid:
      IF ((resol NE 275) AND (resol NE 1100)) THEN BEGIN
         error_code = 130
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': The spatial resolution must be either 275 or 1100.'
         RETURN, error_code
      ENDIF
   ENDIF

   ;  Retrieve the 7 standard masks available from the MISR AGP file for the
   ;  selected Path and Block:
   rc = make_agp_masks(misr_path, misr_block, resol, masks, $
      AGP_VERSION = agp_version, DEBUG = debug, EXCPT_COND = excpt_cond)
   IF (debug AND (rc NE 0)) THEN BEGIN
      error_code = 200
      excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
         ': ' + excpt_cond
      RETURN, error_code
   ENDIF

   ;  Generate the land mask by combining the surface categories 1, 2, 3 and 4:
   land_mask = REFORM(masks[1, *, *]) OR $
      REFORM(masks[2, *, *]) OR $
      REFORM(masks[3, *, *]) OR $
      REFORM(masks[4, *, *])

   ;  Generate the water mask by combining the surface categories 0, 5, and 6:
   water_mask = REFORM(masks[0, *, *]) OR $
      REFORM(masks[5, *, *]) OR $
      REFORM(masks[6, *, *])

   RETURN, return_code

END
